/**
 * auth_service.ts
 *
 * üí° Service centralis√© pour g√©rer l‚Äôauthentification via l‚ÄôAPI.
 *
 * Ce fichier contient toutes les fonctions n√©cessaires √† la connexion,
 * au rafra√Æchissement du token et √† la r√©cup√©ration du profil utilisateur.
 *
 * Fonctions export√©es :
 *
 * - `login(email, password)` :
 *   Envoie les identifiants √† l‚Äôendpoint `/token/` pour r√©cup√©rer les tokens `access` et `refresh`.
 *   ‚û§ Retourne : `{ access, refresh }`
 *
 * - `getUserProfile()` :
 *   Appelle `/users/me/` pour r√©cup√©rer les informations de l'utilisateur authentifi√©.
 *   ‚û§ Retourne : `User` (type personnalis√© venant de `types/user.ts`)
 *
 * - `refreshToken(refreshToken)` :
 *   Utilis√© pour rafra√Æchir le token d‚Äôacc√®s expir√©.
 *   ‚û§ Retourne : `{ access }`
 *
 * üß† Bon √† savoir :
 * - Ce service utilise l'instance `api` configur√©e avec interceptors JWT (`axios.ts`)
 * - Il peut √™tre utilis√© dans `AuthContext` pour centraliser la logique m√©tier d‚Äôauth
 */

import { User } from '@/src/types/user';
import api from '../api/axios';

type LoginResponse = {
  access: string;
  refresh: string;
};

/**
 * Authentifie l'utilisateur et retourne les tokens JWT.
 */
export const login = async (email: string, password: string): Promise<LoginResponse> => {
  const response = await api.post('/token/', { email, password });
  return response.data;
};

/**
 * R√©cup√®re le profil de l'utilisateur connect√© depuis l'API.
 */
export const getUserProfile = async (): Promise<User> => {
  const response = await api.get('/users/me/');
  return response.data.data; // ou `.data` selon ta structure de r√©ponse backend
};

/**
 * Utilise le token de refresh pour obtenir un nouveau token d'acc√®s.
 */
export const refreshToken = async (refreshToken: string): Promise<{ access: string }> => {
  const response = await api.post('/token/refresh/', { refresh: refreshToken });
  return response.data;
};
