/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Rap_app
 * Documentation compl√®te de l'API Rap_App pour l'application mobile et web.
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  Centre,
  CentreRequest,
  CentresListParams,
  Commentaire,
  CommentaireRequest,
  CommentairesListParams,
  CustomUser,
  CustomUserRequest,
  Document,
  DocumentRequest,
  DocumentsListParams,
  DocumentsParFormationRetrieveParams,
  EmailTokenRequestRequest,
  EmailTokenResponse,
  Evenement,
  EvenementRequest,
  EvenementsListParams,
  EvenementsStatsParTypeRetrieveParams,
  Formation,
  FormationRequest,
  FormationsListParams,
  HistoriqueProspection,
  HistoriqueStatutVAE,
  HistoriquesProspectionListParams,
  HistoriquesVaeListParams,
  LogUtilisateur,
  LoginRequest,
  LogsListParams,
  PaginatedCentreList,
  PaginatedCommentaireList,
  PaginatedCustomUserList,
  PaginatedDocumentList,
  PaginatedEvenementList,
  PaginatedFormationList,
  PaginatedHistoriqueProspectionList,
  PaginatedHistoriqueStatutVAEList,
  PaginatedLogUtilisateurList,
  PaginatedPartenaireList,
  PaginatedPrepaCompGlobalList,
  PaginatedProspectionList,
  PaginatedRapportList,
  PaginatedSemaineList,
  PaginatedStatutList,
  PaginatedSuiviJuryList,
  PaginatedTypeOffreList,
  PaginatedVAEList,
  Partenaire,
  PartenaireRequest,
  PartenairesListParams,
  PatchedCentreRequest,
  PatchedCommentaireRequest,
  PatchedCustomUserRequest,
  PatchedDocumentRequest,
  PatchedEvenementRequest,
  PatchedFormationRequest,
  PatchedPartenaireRequest,
  PatchedPrepaCompGlobalRequest,
  PatchedProspectionRequest,
  PatchedRapportRequest,
  PatchedSemaineRequest,
  PatchedStatutRequest,
  PatchedSuiviJuryRequest,
  PatchedTypeOffreRequest,
  PatchedVAERequest,
  PrepaCompGlobal,
  PrepaCompGlobalRequest,
  PrepaGlobauxListParams,
  Prospection,
  ProspectionRequest,
  ProspectionsListParams,
  Rapport,
  RapportRequest,
  RapportsListParams,
  Semaine,
  SemaineRequest,
  SemainesListParams,
  Statut,
  StatutRequest,
  StatutsListParams,
  SuiviJury,
  SuiviJuryRequest,
  SuivisJuryListParams,
  TestTokenRetrieve200,
  TypeOffre,
  TypeOffreRequest,
  TypeoffresListParams,
  User,
  UsersListParams,
  VAERequest,
  Vae,
  VaesListParams
} from '../../types';

export const getRapApp = () => {
/**
 * @summary Lister les centres
 */
const centresList = <TData = AxiosResponse<PaginatedCentreList>>(
    params?: CentresListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/centres/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Cr√©er un centre
 */
const centresCreate = <TData = AxiosResponse<Centre>>(
    centreRequest: CentreRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/centres/`,
      centreRequest,options
    );
  }

/**
 * @summary R√©cup√©rer un centre
 */
const centresRetrieve = <TData = AxiosResponse<Centre>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/centres/${id}/`,options
    );
  }

/**
 * @summary Mettre √† jour un centre
 */
const centresUpdate = <TData = AxiosResponse<Centre>>(
    id: number,
    centreRequest: CentreRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/centres/${id}/`,
      centreRequest,options
    );
  }

/**
 * @summary Mettre √† jour partiellement un centre
 */
const centresPartialUpdate = <TData = AxiosResponse<Centre>>(
    id: number,
    patchedCentreRequest: PatchedCentreRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/centres/${id}/`,
      patchedCentreRequest,options
    );
  }

/**
 * @summary Supprimer (logiquement) un centre
 */
const centresDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/centres/${id}/`,options
    );
  }

/**
 * @summary Lister les commentaires actifs
 */
const commentairesList = <TData = AxiosResponse<PaginatedCommentaireList>>(
    params?: CommentairesListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/commentaires/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Cr√©er un commentaire
 */
const commentairesCreate = <TData = AxiosResponse<Commentaire>>(
    commentaireRequest: CommentaireRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/commentaires/`,
      commentaireRequest,options
    );
  }

/**
 * @summary R√©cup√©rer un commentaire
 */
const commentairesRetrieve = <TData = AxiosResponse<Commentaire>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/commentaires/${id}/`,options
    );
  }

/**
 * @summary Mettre √† jour un commentaire
 */
const commentairesUpdate = <TData = AxiosResponse<Commentaire>>(
    id: number,
    commentaireRequest: CommentaireRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/commentaires/${id}/`,
      commentaireRequest,options
    );
  }

const commentairesPartialUpdate = <TData = AxiosResponse<Commentaire>>(
    id: number,
    patchedCommentaireRequest: PatchedCommentaireRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/commentaires/${id}/`,
      patchedCommentaireRequest,options
    );
  }

/**
 * @summary Supprimer un commentaire
 */
const commentairesDestroy = <TData = AxiosResponse<Commentaire>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/commentaires/${id}/`,options
    );
  }

/**
 * @summary R√©cup√©rer les statistiques de saturation des commentaires
 */
const commentairesSaturationStatsRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/commentaires/saturation-stats/`,options
    );
  }

/**
 * üìé ViewSet complet pour g√©rer les documents li√©s aux formations.
 * @summary üìÑ Lister tous les documents
 */
const documentsList = <TData = AxiosResponse<PaginatedDocumentList>>(
    params?: DocumentsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/documents/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * üìé ViewSet complet pour g√©rer les documents li√©s aux formations.
 * @summary ‚ûï Ajouter un document
 */
const documentsCreate = <TData = AxiosResponse<Document>>(
    documentRequest: DocumentRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/documents/`,
      documentRequest,options
    );
  }

/**
 * üìé ViewSet complet pour g√©rer les documents li√©s aux formations.
 * @summary üìÇ D√©tail d‚Äôun document
 */
const documentsRetrieve = <TData = AxiosResponse<Document>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/documents/${id}/`,options
    );
  }

/**
 * üìé ViewSet complet pour g√©rer les documents li√©s aux formations.
 * @summary ‚úèÔ∏è Modifier un document
 */
const documentsUpdate = <TData = AxiosResponse<Document>>(
    id: number,
    documentRequest: DocumentRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/documents/${id}/`,
      documentRequest,options
    );
  }

/**
 * üìé ViewSet complet pour g√©rer les documents li√©s aux formations.
 */
const documentsPartialUpdate = <TData = AxiosResponse<Document>>(
    id: number,
    patchedDocumentRequest: PatchedDocumentRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/documents/${id}/`,
      patchedDocumentRequest,options
    );
  }

/**
 * üìé ViewSet complet pour g√©rer les documents li√©s aux formations.
 * @summary üóëÔ∏è Supprimer un document
 */
const documentsDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/documents/${id}/`,options
    );
  }

/**
 * üìé ViewSet complet pour g√©rer les documents li√©s aux formations.
 * @summary üßæ Exporter tous les documents au format CSV
 */
const documentsExportCsvRetrieve = <TData = AxiosResponse<Blob>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/documents/export-csv/`,{
        responseType: 'blob',
    ...options,}
    );
  }

/**
 * üìé ViewSet complet pour g√©rer les documents li√©s aux formations.
 * @summary üìö Lister les documents d‚Äôune formation
 */
const documentsParFormationRetrieve = <TData = AxiosResponse<PaginatedDocumentList>>(
    params: DocumentsParFormationRetrieveParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/documents/par-formation/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * üìÜ ViewSet pour g√©rer les √©v√©nements li√©s aux formations.
- CRUD complet
- Actions personnalis√©es : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalis√©e : RapAppPagination
 * @summary üìö Lister les √©v√©nements
 */
const evenementsList = <TData = AxiosResponse<PaginatedEvenementList>>(
    params?: EvenementsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/evenements/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * üìÜ ViewSet pour g√©rer les √©v√©nements li√©s aux formations.
- CRUD complet
- Actions personnalis√©es : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalis√©e : RapAppPagination
 */
const evenementsCreate = <TData = AxiosResponse<Evenement>>(
    evenementRequest: EvenementRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/evenements/`,
      evenementRequest,options
    );
  }

/**
 * üìÜ ViewSet pour g√©rer les √©v√©nements li√©s aux formations.
- CRUD complet
- Actions personnalis√©es : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalis√©e : RapAppPagination
 */
const evenementsRetrieve = <TData = AxiosResponse<Evenement>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/evenements/${id}/`,options
    );
  }

/**
 * üìÜ ViewSet pour g√©rer les √©v√©nements li√©s aux formations.
- CRUD complet
- Actions personnalis√©es : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalis√©e : RapAppPagination
 */
const evenementsUpdate = <TData = AxiosResponse<Evenement>>(
    id: number,
    evenementRequest: EvenementRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/evenements/${id}/`,
      evenementRequest,options
    );
  }

/**
 * üìÜ ViewSet pour g√©rer les √©v√©nements li√©s aux formations.
- CRUD complet
- Actions personnalis√©es : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalis√©e : RapAppPagination
 */
const evenementsPartialUpdate = <TData = AxiosResponse<Evenement>>(
    id: number,
    patchedEvenementRequest: PatchedEvenementRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/evenements/${id}/`,
      patchedEvenementRequest,options
    );
  }

/**
 * üìÜ ViewSet pour g√©rer les √©v√©nements li√©s aux formations.
- CRUD complet
- Actions personnalis√©es : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalis√©e : RapAppPagination
 */
const evenementsDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/evenements/${id}/`,options
    );
  }

/**
 * üì§ Exporte les √©v√©nements au format CSV.
 * @summary üßæ Exporter les √©v√©nements au format CSV
 */
const evenementsExportCsvRetrieve = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/evenements/export-csv/`,options
    );
  }

/**
 * üìà Renvoie des statistiques d'√©v√©nements par type entre deux dates.
 * @summary üìä Statistiques par type d'√©v√©nement
 */
const evenementsStatsParTypeRetrieve = <TData = AxiosResponse<void>>(
    params?: EvenementsStatsParTypeRetrieveParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/evenements/stats-par-type/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Retourne une liste pagin√©e des formations avec filtres disponibles.
 * @summary Lister les formations
 */
const formationsList = <TData = AxiosResponse<PaginatedFormationList>>(
    params?: FormationsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Cr√©er une formation
 */
const formationsCreate = <TData = AxiosResponse<Formation>>(
    formationRequest: FormationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/formations/`,
      formationRequest,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary D√©tail d'une formation
 */
const formationsRetrieve = <TData = AxiosResponse<Formation>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/${id}/`,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Mettre √† jour une formation
 */
const formationsUpdate = <TData = AxiosResponse<Formation>>(
    id: number,
    formationRequest: FormationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/formations/${id}/`,
      formationRequest,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 */
const formationsPartialUpdate = <TData = AxiosResponse<Formation>>(
    id: number,
    patchedFormationRequest: PatchedFormationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/formations/${id}/`,
      patchedFormationRequest,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 */
const formationsDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/formations/${id}/`,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Ajouter un commentaire √† une formation
 */
const formationsAjouterCommentaireCreate = <TData = AxiosResponse<Formation>>(
    id: number,
    formationRequest: FormationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/formations/${id}/ajouter_commentaire/`,
      formationRequest,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Ajouter un document √† une formation
 */
const formationsAjouterDocumentCreate = <TData = AxiosResponse<Formation>>(
    id: number,
    formationRequest: FormationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/formations/${id}/ajouter_document/`,
      formationRequest,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Ajouter un √©v√©nement √† une formation
 */
const formationsAjouterEvenementCreate = <TData = AxiosResponse<Formation>>(
    id: number,
    formationRequest: FormationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/formations/${id}/ajouter_evenement/`,
      formationRequest,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Lister les commentaires d'une formation
 */
const formationsCommentairesRetrieve = <TData = AxiosResponse<Formation>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/${id}/commentaires/`,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Lister les documents d'une formation
 */
const formationsDocumentsRetrieve = <TData = AxiosResponse<Formation>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/${id}/documents/`,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Dupliquer une formation
 */
const formationsDupliquerCreate = <TData = AxiosResponse<Formation>>(
    id: number,
    formationRequest: FormationRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/formations/${id}/dupliquer/`,
      formationRequest,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Obtenir l'historique d'une formation
 */
const formationsHistoriqueRetrieve = <TData = AxiosResponse<Formation>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/${id}/historique/`,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Lister les partenaires d'une formation
 */
const formationsPartenairesRetrieve = <TData = AxiosResponse<Formation>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/${id}/partenaires/`,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Lister les prospections li√©es √† une formation
 */
const formationsProspectionsRetrieve = <TData = AxiosResponse<Formation>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/${id}/prospections/`,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Exporter les formations au format CSV
 */
const formationsExportCsvRetrieve = <TData = AxiosResponse<Formation>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/export_csv/`,options
    );
  }

/**
 * üìö ViewSet pour g√©rer les formations.
Inclut les op√©rations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalis√©es comme duplication et export CSV.
 * @summary Statistiques mensuelles des formations
 */
const formationsStatsParMoisRetrieve = <TData = AxiosResponse<Formation>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/formations/stats_par_mois/`,options
    );
  }

/**
 * @summary Lister les historiques de prospection
 */
const historiquesProspectionList = <TData = AxiosResponse<PaginatedHistoriqueProspectionList>>(
    params?: HistoriquesProspectionListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/historiques-prospection/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary D√©tail d‚Äôun historique de prospection
 */
const historiquesProspectionRetrieve = <TData = AxiosResponse<HistoriqueProspection>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/historiques-prospection/${id}/`,options
    );
  }

/**
 * üìò ViewSet en lecture seule pour l‚Äôhistorique des statuts de VAE.
 */
const historiquesVaeList = <TData = AxiosResponse<PaginatedHistoriqueStatutVAEList>>(
    params?: HistoriquesVaeListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/historiques-vae/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * üìò ViewSet en lecture seule pour l‚Äôhistorique des statuts de VAE.
 */
const historiquesVaeRetrieve = <TData = AxiosResponse<HistoriqueStatutVAE>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/historiques-vae/${id}/`,options
    );
  }

/**
 * 
    Permet √† un utilisateur de se connecter et de recevoir un token d'authentification.

    ‚úÖ Acc√®s public (non authentifi√©).
    üîê Le token est requis ensuite pour les appels prot√©g√©s.
    
 * @summary Connexion
 */
const loginCreate = <TData = AxiosResponse<User>>(
    loginRequest: LoginRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/login/`,
      loginRequest,options
    );
  }

/**
 * Affiche tous les logs enregistr√©s (lecture seule, pagin√©e).
 * @summary Liste des logs utilisateur
 */
const logsList = <TData = AxiosResponse<PaginatedLogUtilisateurList>>(
    params?: LogsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/logs/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Affiche les d√©tails d‚Äôun log utilisateur.
 * @summary D√©tail d‚Äôun log
 */
const logsRetrieve = <TData = AxiosResponse<LogUtilisateur>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/logs/${id}/`,options
    );
  }

/**
 * üîÅ ViewSet CRUD complet pour les partenaires
 * @summary Lister les partenaires
 */
const partenairesList = <TData = AxiosResponse<PaginatedPartenaireList>>(
    params?: PartenairesListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/partenaires/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * üîÅ ViewSet CRUD complet pour les partenaires
 * @summary Cr√©er un partenaire
 */
const partenairesCreate = <TData = AxiosResponse<void>>(
    partenaireRequest: PartenaireRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/partenaires/`,
      partenaireRequest,options
    );
  }

/**
 * üîÅ ViewSet CRUD complet pour les partenaires
 * @summary D√©tail d‚Äôun partenaire
 */
const partenairesRetrieve = <TData = AxiosResponse<Partenaire>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/partenaires/${id}/`,options
    );
  }

/**
 * üîÅ ViewSet CRUD complet pour les partenaires
 * @summary Modifier un partenaire
 */
const partenairesUpdate = <TData = AxiosResponse<void>>(
    id: number,
    partenaireRequest: PartenaireRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/partenaires/${id}/`,
      partenaireRequest,options
    );
  }

/**
 * üîÅ ViewSet CRUD complet pour les partenaires
 */
const partenairesPartialUpdate = <TData = AxiosResponse<Partenaire>>(
    id: number,
    patchedPartenaireRequest: PatchedPartenaireRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/partenaires/${id}/`,
      patchedPartenaireRequest,options
    );
  }

/**
 * üîÅ ViewSet CRUD complet pour les partenaires
 * @summary Supprimer un partenaire
 */
const partenairesDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/partenaires/${id}/`,options
    );
  }

/**
 * @summary Lister les bilans globaux
 */
const prepaGlobauxList = <TData = AxiosResponse<PaginatedPrepaCompGlobalList>>(
    params?: PrepaGlobauxListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/prepa-globaux/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Cr√©er un bilan global
 */
const prepaGlobauxCreate = <TData = AxiosResponse<PrepaCompGlobal>>(
    prepaCompGlobalRequest: PrepaCompGlobalRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/prepa-globaux/`,
      prepaCompGlobalRequest,options
    );
  }

/**
 * @summary D√©tail d‚Äôun bilan global
 */
const prepaGlobauxRetrieve = <TData = AxiosResponse<PrepaCompGlobal>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/prepa-globaux/${id}/`,options
    );
  }

/**
 * @summary Modifier un bilan global
 */
const prepaGlobauxUpdate = <TData = AxiosResponse<PrepaCompGlobal>>(
    id: number,
    prepaCompGlobalRequest: PrepaCompGlobalRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/prepa-globaux/${id}/`,
      prepaCompGlobalRequest,options
    );
  }

const prepaGlobauxPartialUpdate = <TData = AxiosResponse<PrepaCompGlobal>>(
    id: number,
    patchedPrepaCompGlobalRequest: PatchedPrepaCompGlobalRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/prepa-globaux/${id}/`,
      patchedPrepaCompGlobalRequest,options
    );
  }

/**
 * @summary Supprimer un bilan global
 */
const prepaGlobauxDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/prepa-globaux/${id}/`,options
    );
  }

const prepaGlobauxParCentreRetrieve = <TData = AxiosResponse<PrepaCompGlobal>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/prepa-globaux/par-centre/`,options
    );
  }

/**
 * @summary Liste des prospections
 */
const prospectionsList = <TData = AxiosResponse<PaginatedProspectionList>>(
    params?: ProspectionsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/prospections/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Cr√©er une prospection
 */
const prospectionsCreate = <TData = AxiosResponse<Prospection>>(
    prospectionRequest: ProspectionRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/prospections/`,
      prospectionRequest,options
    );
  }

/**
 * @summary D√©tail d'une prospection
 */
const prospectionsRetrieve = <TData = AxiosResponse<Prospection>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/prospections/${id}/`,options
    );
  }

/**
 * @summary Mettre √† jour une prospection
 */
const prospectionsUpdate = <TData = AxiosResponse<Prospection>>(
    id: number,
    prospectionRequest: ProspectionRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/prospections/${id}/`,
      prospectionRequest,options
    );
  }

const prospectionsPartialUpdate = <TData = AxiosResponse<Prospection>>(
    id: number,
    patchedProspectionRequest: PatchedProspectionRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/prospections/${id}/`,
      patchedProspectionRequest,options
    );
  }

/**
 * @summary Annuler une prospection
 */
const prospectionsDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/prospections/${id}/`,options
    );
  }

const prospectionsChangerStatutCreate = <TData = AxiosResponse<Prospection>>(
    id: number,
    prospectionRequest: ProspectionRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/prospections/${id}/changer-statut/`,
      prospectionRequest,options
    );
  }

const prospectionsHistoriquesRetrieve = <TData = AxiosResponse<Prospection>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/prospections/${id}/historiques/`,options
    );
  }

/**
 * Affiche la liste pagin√©e des rapports g√©n√©r√©s.
 * @summary üìä Liste des rapports
 */
const rapportsList = <TData = AxiosResponse<PaginatedRapportList>>(
    params?: RapportsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rapports/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Cr√©e un nouveau rapport syst√®me ou manuel.
 * @summary ‚ûï Cr√©er un rapport
 */
const rapportsCreate = <TData = AxiosResponse<void>>(
    rapportRequest: RapportRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/rapports/`,
      rapportRequest,options
    );
  }

/**
 * R√©cup√®re les d√©tails complets d‚Äôun rapport.
 * @summary üìÑ D√©tail d‚Äôun rapport
 */
const rapportsRetrieve = <TData = AxiosResponse<Rapport>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rapports/${id}/`,options
    );
  }

/**
 * Met √† jour les champs d‚Äôun rapport existant.
 * @summary ‚úèÔ∏è Modifier un rapport
 */
const rapportsUpdate = <TData = AxiosResponse<void>>(
    id: number,
    rapportRequest: RapportRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/rapports/${id}/`,
      rapportRequest,options
    );
  }

/**
 * üìä ViewSet complet pour les rapports.
CRUD + pagination + journalisation + s√©curit√©
 */
const rapportsPartialUpdate = <TData = AxiosResponse<Rapport>>(
    id: number,
    patchedRapportRequest: PatchedRapportRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/rapports/${id}/`,
      patchedRapportRequest,options
    );
  }

/**
 * Supprime logiquement un rapport (d√©sactivation).
 * @summary üóëÔ∏è Supprimer un rapport
 */
const rapportsDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/rapports/${id}/`,options
    );
  }

/**
 * Retourne toutes les semaines avec pagination.
 * @summary Lister les semaines
 */
const semainesList = <TData = AxiosResponse<PaginatedSemaineList>>(
    params?: SemainesListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/semaines/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Cr√©er une semaine
 */
const semainesCreate = <TData = AxiosResponse<Semaine>>(
    semaineRequest: SemaineRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/semaines/`,
      semaineRequest,options
    );
  }

/**
 * @summary D√©tail d'une semaine
 */
const semainesRetrieve = <TData = AxiosResponse<Semaine>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/semaines/${id}/`,options
    );
  }

/**
 * @summary Mettre √† jour une semaine
 */
const semainesUpdate = <TData = AxiosResponse<Semaine>>(
    id: number,
    semaineRequest: SemaineRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/semaines/${id}/`,
      semaineRequest,options
    );
  }

const semainesPartialUpdate = <TData = AxiosResponse<Semaine>>(
    id: number,
    patchedSemaineRequest: PatchedSemaineRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/semaines/${id}/`,
      patchedSemaineRequest,options
    );
  }

/**
 * @summary Supprimer une semaine
 */
const semainesDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/semaines/${id}/`,options
    );
  }

const semainesCouranteRetrieve = <TData = AxiosResponse<Semaine>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/semaines/courante/`,options
    );
  }

/**
 * R√©cup√®re tous les statuts actifs avec libell√©s, couleurs et badges HTML.
 * @summary Liste des statuts
 */
const statutsList = <TData = AxiosResponse<PaginatedStatutList>>(
    params?: StatutsListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/statuts/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Cr√©e un nouveau statut avec validation stricte des couleurs et du champ 'autre'.
 * @summary Cr√©er un statut
 */
const statutsCreate = <TData = AxiosResponse<Statut>>(
    statutRequest: StatutRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/statuts/`,
      statutRequest,options
    );
  }

/**
 * Retourne les d√©tails d‚Äôun statut par ID.
 * @summary D√©tail d‚Äôun statut
 */
const statutsRetrieve = <TData = AxiosResponse<Statut>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/statuts/${id}/`,options
    );
  }

/**
 * Met √† jour un statut existant (partiellement ou compl√®tement).
 * @summary Mettre √† jour un statut
 */
const statutsUpdate = <TData = AxiosResponse<Statut>>(
    id: number,
    statutRequest: StatutRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/statuts/${id}/`,
      statutRequest,options
    );
  }

/**
 * üéØ API REST pour la gestion des statuts de formation.
Permet la cr√©ation, consultation, mise √† jour et d√©sactivation logique.
 */
const statutsPartialUpdate = <TData = AxiosResponse<Statut>>(
    id: number,
    patchedStatutRequest: PatchedStatutRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/statuts/${id}/`,
      patchedStatutRequest,options
    );
  }

/**
 * Supprime logiquement un statut en le d√©sactivant (is_active = False).
 * @summary Supprimer un statut
 */
const statutsDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/statuts/${id}/`,options
    );
  }

const suivisJuryList = <TData = AxiosResponse<PaginatedSuiviJuryList>>(
    params?: SuivisJuryListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/suivis-jury/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Cr√©er un suivi jury
 */
const suivisJuryCreate = <TData = AxiosResponse<SuiviJury>>(
    suiviJuryRequest: SuiviJuryRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/suivis-jury/`,
      suiviJuryRequest,options
    );
  }

const suivisJuryRetrieve = <TData = AxiosResponse<SuiviJury>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/suivis-jury/${id}/`,options
    );
  }

/**
 * @summary Mettre √† jour un suivi jury
 */
const suivisJuryUpdate = <TData = AxiosResponse<SuiviJury>>(
    id: number,
    suiviJuryRequest: SuiviJuryRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/suivis-jury/${id}/`,
      suiviJuryRequest,options
    );
  }

const suivisJuryPartialUpdate = <TData = AxiosResponse<SuiviJury>>(
    id: number,
    patchedSuiviJuryRequest: PatchedSuiviJuryRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/suivis-jury/${id}/`,
      patchedSuiviJuryRequest,options
    );
  }

/**
 * @summary Supprimer logiquement un suivi jury
 */
const suivisJuryDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/suivis-jury/${id}/`,options
    );
  }

/**
 * 
        Cette vue permet de v√©rifier si un token d‚Äôauthentification (JWT ou DRF Token) est valide,
        et retourne les informations du compte utilisateur connect√©, y compris son r√¥le.

        üîí Requiert un token d‚Äôauthentification valide dans l'en-t√™te `Authorization`.
    
 * @summary V√©rifier la validit√© du token et le r√¥le
 */
const testTokenRetrieve = <TData = AxiosResponse<TestTokenRetrieve200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/test-token/`,options
    );
  }

/**
 * Retourne un access token (JWT) et un refresh token.
 * @summary Connexion avec email et mot de passe
 */
const tokenCreate = <TData = AxiosResponse<EmailTokenResponse>>(
    emailTokenRequestRequest: EmailTokenRequestRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/token/`,
      emailTokenRequestRequest,options
    );
  }

/**
 * Retourne la liste pagin√©e des types d'offres disponibles.
 * @summary üìÑ Liste des types d'offres
 */
const typeoffresList = <TData = AxiosResponse<PaginatedTypeOffreList>>(
    params?: TypeoffresListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/typeoffres/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Ajoute un nouveau type d‚Äôoffre, standard ou personnalis√©.
 * @summary ‚ûï Cr√©er un type d‚Äôoffre
 */
const typeoffresCreate = <TData = AxiosResponse<void>>(
    typeOffreRequest: TypeOffreRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/typeoffres/`,
      typeOffreRequest,options
    );
  }

/**
 * Retourne les informations d√©taill√©es pour un type d'offre.
 * @summary üîç D√©tail d‚Äôun type d‚Äôoffre
 */
const typeoffresRetrieve = <TData = AxiosResponse<TypeOffre>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/typeoffres/${id}/`,options
    );
  }

/**
 * Met √† jour les donn√©es d‚Äôun type d‚Äôoffre existant.
 * @summary ‚úèÔ∏è Modifier un type d‚Äôoffre
 */
const typeoffresUpdate = <TData = AxiosResponse<void>>(
    id: number,
    typeOffreRequest: TypeOffreRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/typeoffres/${id}/`,
      typeOffreRequest,options
    );
  }

/**
 * üéØ ViewSet complet pour les types d'offres.
CRUD + journalisation + pagination + permissions + Swagger.
 */
const typeoffresPartialUpdate = <TData = AxiosResponse<TypeOffre>>(
    id: number,
    patchedTypeOffreRequest: PatchedTypeOffreRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/typeoffres/${id}/`,
      patchedTypeOffreRequest,options
    );
  }

/**
 * Suppression logique d‚Äôun type d‚Äôoffre (d√©sactivation).
 * @summary üóëÔ∏è Supprimer un type d‚Äôoffre
 */
const typeoffresDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/typeoffres/${id}/`,options
    );
  }

/**
 * R√©cup√®re tous les utilisateurs actifs, avec filtrage, recherche et tri.
 * @summary Liste des utilisateurs
 */
const usersList = <TData = AxiosResponse<PaginatedCustomUserList>>(
    params?: UsersListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Cr√©e un nouvel utilisateur avec un r√¥le, un email et d'autres champs.
 * @summary Cr√©er un utilisateur
 */
const usersCreate = <TData = AxiosResponse<void>>(
    customUserRequest: CustomUserRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/users/`,
      customUserRequest,options
    );
  }

/**
 * R√©cup√®re les informations d√©taill√©es d‚Äôun utilisateur par ID.
 * @summary D√©tail d'un utilisateur
 */
const usersRetrieve = <TData = AxiosResponse<CustomUser>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/${id}/`,options
    );
  }

/**
 * Modifie les champs d‚Äôun utilisateur existant.
 * @summary Mettre √† jour un utilisateur
 */
const usersUpdate = <TData = AxiosResponse<void>>(
    id: number,
    customUserRequest: CustomUserRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/users/${id}/`,
      customUserRequest,options
    );
  }

/**
 * üë§ ViewSet complet pour la gestion des utilisateurs.
Fournit les actions CRUD + une action `me` pour l‚Äôutilisateur connect√©.
 */
const usersPartialUpdate = <TData = AxiosResponse<CustomUser>>(
    id: number,
    patchedCustomUserRequest: PatchedCustomUserRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/users/${id}/`,
      patchedCustomUserRequest,options
    );
  }

/**
 * Supprime logiquement un utilisateur (is_active = False).
 * @summary Supprimer un utilisateur
 */
const usersDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/users/${id}/`,options
    );
  }

/**
 * üë§ ViewSet complet pour la gestion des utilisateurs.
Fournit les actions CRUD + une action `me` pour l‚Äôutilisateur connect√©.
 */
const usersMeRetrieve = <TData = AxiosResponse<CustomUser>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/me/`,options
    );
  }

/**
 * üë§ ViewSet complet pour la gestion des utilisateurs.
Fournit les actions CRUD + une action `me` pour l‚Äôutilisateur connect√©.
 */
const usersRolesRetrieve = <TData = AxiosResponse<CustomUser>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/roles/`,options
    );
  }

/**
 * üìù ViewSet principal pour la gestion des VAE individuelles.
 */
const vaesList = <TData = AxiosResponse<PaginatedVAEList>>(
    params?: VaesListParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/vaes/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * üìù ViewSet principal pour la gestion des VAE individuelles.
 * @summary Cr√©er une VAE
 */
const vaesCreate = <TData = AxiosResponse<Vae>>(
    vAERequest: VAERequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/vaes/`,
      vAERequest,options
    );
  }

/**
 * üìù ViewSet principal pour la gestion des VAE individuelles.
 */
const vaesRetrieve = <TData = AxiosResponse<Vae>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/vaes/${id}/`,options
    );
  }

/**
 * üìù ViewSet principal pour la gestion des VAE individuelles.
 * @summary Mettre √† jour une VAE
 */
const vaesUpdate = <TData = AxiosResponse<Vae>>(
    id: number,
    vAERequest: VAERequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/vaes/${id}/`,
      vAERequest,options
    );
  }

/**
 * üìù ViewSet principal pour la gestion des VAE individuelles.
 */
const vaesPartialUpdate = <TData = AxiosResponse<Vae>>(
    id: number,
    patchedVAERequest: PatchedVAERequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `/vaes/${id}/`,
      patchedVAERequest,options
    );
  }

/**
 * üìù ViewSet principal pour la gestion des VAE individuelles.
 * @summary Supprimer logiquement une VAE
 */
const vaesDestroy = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `/vaes/${id}/`,options
    );
  }

/**
 * üîÅ Change le statut d‚Äôune VAE avec historique.
 */
const vaesChangerStatutCreate = <TData = AxiosResponse<Vae>>(
    id: number,
    vAERequest: VAERequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/vaes/${id}/changer-statut/`,
      vAERequest,options
    );
  }

/**
 * üìú Liste des changements de statut pour une VAE donn√©e.
 */
const vaesHistoriquesRetrieve = <TData = AxiosResponse<Vae>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/vaes/${id}/historiques/`,options
    );
  }

return {centresList,centresCreate,centresRetrieve,centresUpdate,centresPartialUpdate,centresDestroy,commentairesList,commentairesCreate,commentairesRetrieve,commentairesUpdate,commentairesPartialUpdate,commentairesDestroy,commentairesSaturationStatsRetrieve,documentsList,documentsCreate,documentsRetrieve,documentsUpdate,documentsPartialUpdate,documentsDestroy,documentsExportCsvRetrieve,documentsParFormationRetrieve,evenementsList,evenementsCreate,evenementsRetrieve,evenementsUpdate,evenementsPartialUpdate,evenementsDestroy,evenementsExportCsvRetrieve,evenementsStatsParTypeRetrieve,formationsList,formationsCreate,formationsRetrieve,formationsUpdate,formationsPartialUpdate,formationsDestroy,formationsAjouterCommentaireCreate,formationsAjouterDocumentCreate,formationsAjouterEvenementCreate,formationsCommentairesRetrieve,formationsDocumentsRetrieve,formationsDupliquerCreate,formationsHistoriqueRetrieve,formationsPartenairesRetrieve,formationsProspectionsRetrieve,formationsExportCsvRetrieve,formationsStatsParMoisRetrieve,historiquesProspectionList,historiquesProspectionRetrieve,historiquesVaeList,historiquesVaeRetrieve,loginCreate,logsList,logsRetrieve,partenairesList,partenairesCreate,partenairesRetrieve,partenairesUpdate,partenairesPartialUpdate,partenairesDestroy,prepaGlobauxList,prepaGlobauxCreate,prepaGlobauxRetrieve,prepaGlobauxUpdate,prepaGlobauxPartialUpdate,prepaGlobauxDestroy,prepaGlobauxParCentreRetrieve,prospectionsList,prospectionsCreate,prospectionsRetrieve,prospectionsUpdate,prospectionsPartialUpdate,prospectionsDestroy,prospectionsChangerStatutCreate,prospectionsHistoriquesRetrieve,rapportsList,rapportsCreate,rapportsRetrieve,rapportsUpdate,rapportsPartialUpdate,rapportsDestroy,semainesList,semainesCreate,semainesRetrieve,semainesUpdate,semainesPartialUpdate,semainesDestroy,semainesCouranteRetrieve,statutsList,statutsCreate,statutsRetrieve,statutsUpdate,statutsPartialUpdate,statutsDestroy,suivisJuryList,suivisJuryCreate,suivisJuryRetrieve,suivisJuryUpdate,suivisJuryPartialUpdate,suivisJuryDestroy,testTokenRetrieve,tokenCreate,typeoffresList,typeoffresCreate,typeoffresRetrieve,typeoffresUpdate,typeoffresPartialUpdate,typeoffresDestroy,usersList,usersCreate,usersRetrieve,usersUpdate,usersPartialUpdate,usersDestroy,usersMeRetrieve,usersRolesRetrieve,vaesList,vaesCreate,vaesRetrieve,vaesUpdate,vaesPartialUpdate,vaesDestroy,vaesChangerStatutCreate,vaesHistoriquesRetrieve}};
export type CentresListResult = AxiosResponse<PaginatedCentreList>
export type CentresCreateResult = AxiosResponse<Centre>
export type CentresRetrieveResult = AxiosResponse<Centre>
export type CentresUpdateResult = AxiosResponse<Centre>
export type CentresPartialUpdateResult = AxiosResponse<Centre>
export type CentresDestroyResult = AxiosResponse<void>
export type CommentairesListResult = AxiosResponse<PaginatedCommentaireList>
export type CommentairesCreateResult = AxiosResponse<Commentaire>
export type CommentairesRetrieveResult = AxiosResponse<Commentaire>
export type CommentairesUpdateResult = AxiosResponse<Commentaire>
export type CommentairesPartialUpdateResult = AxiosResponse<Commentaire>
export type CommentairesDestroyResult = AxiosResponse<Commentaire>
export type CommentairesSaturationStatsRetrieveResult = AxiosResponse<void>
export type DocumentsListResult = AxiosResponse<PaginatedDocumentList>
export type DocumentsCreateResult = AxiosResponse<Document>
export type DocumentsRetrieveResult = AxiosResponse<Document>
export type DocumentsUpdateResult = AxiosResponse<Document>
export type DocumentsPartialUpdateResult = AxiosResponse<Document>
export type DocumentsDestroyResult = AxiosResponse<void>
export type DocumentsExportCsvRetrieveResult = AxiosResponse<Blob>
export type DocumentsParFormationRetrieveResult = AxiosResponse<PaginatedDocumentList>
export type EvenementsListResult = AxiosResponse<PaginatedEvenementList>
export type EvenementsCreateResult = AxiosResponse<Evenement>
export type EvenementsRetrieveResult = AxiosResponse<Evenement>
export type EvenementsUpdateResult = AxiosResponse<Evenement>
export type EvenementsPartialUpdateResult = AxiosResponse<Evenement>
export type EvenementsDestroyResult = AxiosResponse<void>
export type EvenementsExportCsvRetrieveResult = AxiosResponse<void>
export type EvenementsStatsParTypeRetrieveResult = AxiosResponse<void>
export type FormationsListResult = AxiosResponse<PaginatedFormationList>
export type FormationsCreateResult = AxiosResponse<Formation>
export type FormationsRetrieveResult = AxiosResponse<Formation>
export type FormationsUpdateResult = AxiosResponse<Formation>
export type FormationsPartialUpdateResult = AxiosResponse<Formation>
export type FormationsDestroyResult = AxiosResponse<void>
export type FormationsAjouterCommentaireCreateResult = AxiosResponse<Formation>
export type FormationsAjouterDocumentCreateResult = AxiosResponse<Formation>
export type FormationsAjouterEvenementCreateResult = AxiosResponse<Formation>
export type FormationsCommentairesRetrieveResult = AxiosResponse<Formation>
export type FormationsDocumentsRetrieveResult = AxiosResponse<Formation>
export type FormationsDupliquerCreateResult = AxiosResponse<Formation>
export type FormationsHistoriqueRetrieveResult = AxiosResponse<Formation>
export type FormationsPartenairesRetrieveResult = AxiosResponse<Formation>
export type FormationsProspectionsRetrieveResult = AxiosResponse<Formation>
export type FormationsExportCsvRetrieveResult = AxiosResponse<Formation>
export type FormationsStatsParMoisRetrieveResult = AxiosResponse<Formation>
export type HistoriquesProspectionListResult = AxiosResponse<PaginatedHistoriqueProspectionList>
export type HistoriquesProspectionRetrieveResult = AxiosResponse<HistoriqueProspection>
export type HistoriquesVaeListResult = AxiosResponse<PaginatedHistoriqueStatutVAEList>
export type HistoriquesVaeRetrieveResult = AxiosResponse<HistoriqueStatutVAE>
export type LoginCreateResult = AxiosResponse<User>
export type LogsListResult = AxiosResponse<PaginatedLogUtilisateurList>
export type LogsRetrieveResult = AxiosResponse<LogUtilisateur>
export type PartenairesListResult = AxiosResponse<PaginatedPartenaireList>
export type PartenairesCreateResult = AxiosResponse<void>
export type PartenairesRetrieveResult = AxiosResponse<Partenaire>
export type PartenairesUpdateResult = AxiosResponse<void>
export type PartenairesPartialUpdateResult = AxiosResponse<Partenaire>
export type PartenairesDestroyResult = AxiosResponse<void>
export type PrepaGlobauxListResult = AxiosResponse<PaginatedPrepaCompGlobalList>
export type PrepaGlobauxCreateResult = AxiosResponse<PrepaCompGlobal>
export type PrepaGlobauxRetrieveResult = AxiosResponse<PrepaCompGlobal>
export type PrepaGlobauxUpdateResult = AxiosResponse<PrepaCompGlobal>
export type PrepaGlobauxPartialUpdateResult = AxiosResponse<PrepaCompGlobal>
export type PrepaGlobauxDestroyResult = AxiosResponse<void>
export type PrepaGlobauxParCentreRetrieveResult = AxiosResponse<PrepaCompGlobal>
export type ProspectionsListResult = AxiosResponse<PaginatedProspectionList>
export type ProspectionsCreateResult = AxiosResponse<Prospection>
export type ProspectionsRetrieveResult = AxiosResponse<Prospection>
export type ProspectionsUpdateResult = AxiosResponse<Prospection>
export type ProspectionsPartialUpdateResult = AxiosResponse<Prospection>
export type ProspectionsDestroyResult = AxiosResponse<void>
export type ProspectionsChangerStatutCreateResult = AxiosResponse<Prospection>
export type ProspectionsHistoriquesRetrieveResult = AxiosResponse<Prospection>
export type RapportsListResult = AxiosResponse<PaginatedRapportList>
export type RapportsCreateResult = AxiosResponse<void>
export type RapportsRetrieveResult = AxiosResponse<Rapport>
export type RapportsUpdateResult = AxiosResponse<void>
export type RapportsPartialUpdateResult = AxiosResponse<Rapport>
export type RapportsDestroyResult = AxiosResponse<void>
export type SemainesListResult = AxiosResponse<PaginatedSemaineList>
export type SemainesCreateResult = AxiosResponse<Semaine>
export type SemainesRetrieveResult = AxiosResponse<Semaine>
export type SemainesUpdateResult = AxiosResponse<Semaine>
export type SemainesPartialUpdateResult = AxiosResponse<Semaine>
export type SemainesDestroyResult = AxiosResponse<void>
export type SemainesCouranteRetrieveResult = AxiosResponse<Semaine>
export type StatutsListResult = AxiosResponse<PaginatedStatutList>
export type StatutsCreateResult = AxiosResponse<Statut>
export type StatutsRetrieveResult = AxiosResponse<Statut>
export type StatutsUpdateResult = AxiosResponse<Statut>
export type StatutsPartialUpdateResult = AxiosResponse<Statut>
export type StatutsDestroyResult = AxiosResponse<void>
export type SuivisJuryListResult = AxiosResponse<PaginatedSuiviJuryList>
export type SuivisJuryCreateResult = AxiosResponse<SuiviJury>
export type SuivisJuryRetrieveResult = AxiosResponse<SuiviJury>
export type SuivisJuryUpdateResult = AxiosResponse<SuiviJury>
export type SuivisJuryPartialUpdateResult = AxiosResponse<SuiviJury>
export type SuivisJuryDestroyResult = AxiosResponse<void>
export type TestTokenRetrieveResult = AxiosResponse<TestTokenRetrieve200>
export type TokenCreateResult = AxiosResponse<EmailTokenResponse>
export type TypeoffresListResult = AxiosResponse<PaginatedTypeOffreList>
export type TypeoffresCreateResult = AxiosResponse<void>
export type TypeoffresRetrieveResult = AxiosResponse<TypeOffre>
export type TypeoffresUpdateResult = AxiosResponse<void>
export type TypeoffresPartialUpdateResult = AxiosResponse<TypeOffre>
export type TypeoffresDestroyResult = AxiosResponse<void>
export type UsersListResult = AxiosResponse<PaginatedCustomUserList>
export type UsersCreateResult = AxiosResponse<void>
export type UsersRetrieveResult = AxiosResponse<CustomUser>
export type UsersUpdateResult = AxiosResponse<void>
export type UsersPartialUpdateResult = AxiosResponse<CustomUser>
export type UsersDestroyResult = AxiosResponse<void>
export type UsersMeRetrieveResult = AxiosResponse<CustomUser>
export type UsersRolesRetrieveResult = AxiosResponse<CustomUser>
export type VaesListResult = AxiosResponse<PaginatedVAEList>
export type VaesCreateResult = AxiosResponse<Vae>
export type VaesRetrieveResult = AxiosResponse<Vae>
export type VaesUpdateResult = AxiosResponse<Vae>
export type VaesPartialUpdateResult = AxiosResponse<Vae>
export type VaesDestroyResult = AxiosResponse<void>
export type VaesChangerStatutCreateResult = AxiosResponse<Vae>
export type VaesHistoriquesRetrieveResult = AxiosResponse<Vae>
