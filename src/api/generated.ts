/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Rap_app
 * Documentation complète de l'API Rap_App pour l'application mobile et web.
 * OpenAPI spec version: 1.0.0
 */
import type {
  Centre,
  CentreRequest,
  CentresListParams,
  Commentaire,
  CommentaireRequest,
  CommentairesListParams,
  CustomUser,
  CustomUserRequest,
  Document,
  DocumentRequest,
  DocumentsListParams,
  DocumentsParFormationRetrieveParams,
  EmailTokenRequestRequest,
  EmailTokenResponse,
  Evenement,
  EvenementRequest,
  EvenementsListParams,
  EvenementsStatsParTypeRetrieveParams,
  Formation,
  FormationRequest,
  FormationsListParams,
  HistoriqueProspection,
  HistoriqueStatutVAE,
  HistoriquesProspectionListParams,
  HistoriquesVaeListParams,
  LogUtilisateur,
  LoginRequest,
  LogsListParams,
  PaginatedCentreList,
  PaginatedCommentaireList,
  PaginatedCustomUserList,
  PaginatedDocumentList,
  PaginatedEvenementList,
  PaginatedFormationList,
  PaginatedHistoriqueProspectionList,
  PaginatedHistoriqueStatutVAEList,
  PaginatedLogUtilisateurList,
  PaginatedPartenaireList,
  PaginatedPrepaCompGlobalList,
  PaginatedProspectionList,
  PaginatedRapportList,
  PaginatedSemaineList,
  PaginatedStatutList,
  PaginatedSuiviJuryList,
  PaginatedTypeOffreList,
  PaginatedVAEList,
  Partenaire,
  PartenaireRequest,
  PartenairesListParams,
  PatchedCentreRequest,
  PatchedCommentaireRequest,
  PatchedCustomUserRequest,
  PatchedDocumentRequest,
  PatchedEvenementRequest,
  PatchedFormationRequest,
  PatchedPartenaireRequest,
  PatchedPrepaCompGlobalRequest,
  PatchedProspectionRequest,
  PatchedRapportRequest,
  PatchedSemaineRequest,
  PatchedStatutRequest,
  PatchedSuiviJuryRequest,
  PatchedTypeOffreRequest,
  PatchedVAERequest,
  PrepaCompGlobal,
  PrepaCompGlobalRequest,
  PrepaGlobauxListParams,
  Prospection,
  ProspectionRequest,
  ProspectionsListParams,
  Rapport,
  RapportRequest,
  RapportsListParams,
  Semaine,
  SemaineRequest,
  SemainesListParams,
  Statut,
  StatutRequest,
  StatutsListParams,
  SuiviJury,
  SuiviJuryRequest,
  SuivisJuryListParams,
  TestTokenRetrieve200,
  TypeOffre,
  TypeOffreRequest,
  TypeoffresListParams,
  User,
  UsersListParams,
  VAERequest,
  Vae,
  VaesListParams
} from '../types';

import { customAxios } from './axios';
export const getRapApp = () => {
/**
 * @summary Lister les centres
 */
const centresList = (
    params?: CentresListParams,
 ) => {
      return customAxios<PaginatedCentreList>(
      {url: `/centres/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Créer un centre
 */
const centresCreate = (
    centreRequest: CentreRequest,
 ) => {
      return customAxios<Centre>(
      {url: `/centres/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: centreRequest
    },
      );
    }
  
/**
 * @summary Récupérer un centre
 */
const centresRetrieve = (
    id: number,
 ) => {
      return customAxios<Centre>(
      {url: `/centres/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Mettre à jour un centre
 */
const centresUpdate = (
    id: number,
    centreRequest: CentreRequest,
 ) => {
      return customAxios<Centre>(
      {url: `/centres/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: centreRequest
    },
      );
    }
  
/**
 * @summary Mettre à jour partiellement un centre
 */
const centresPartialUpdate = (
    id: number,
    patchedCentreRequest: PatchedCentreRequest,
 ) => {
      return customAxios<Centre>(
      {url: `/centres/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedCentreRequest
    },
      );
    }
  
/**
 * @summary Supprimer (logiquement) un centre
 */
const centresDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/centres/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary Lister les commentaires actifs
 */
const commentairesList = (
    params?: CommentairesListParams,
 ) => {
      return customAxios<PaginatedCommentaireList>(
      {url: `/commentaires/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Créer un commentaire
 */
const commentairesCreate = (
    commentaireRequest: CommentaireRequest,
 ) => {
      return customAxios<Commentaire>(
      {url: `/commentaires/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: commentaireRequest
    },
      );
    }
  
/**
 * @summary Récupérer un commentaire
 */
const commentairesRetrieve = (
    id: number,
 ) => {
      return customAxios<Commentaire>(
      {url: `/commentaires/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Mettre à jour un commentaire
 */
const commentairesUpdate = (
    id: number,
    commentaireRequest: CommentaireRequest,
 ) => {
      return customAxios<Commentaire>(
      {url: `/commentaires/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: commentaireRequest
    },
      );
    }
  
const commentairesPartialUpdate = (
    id: number,
    patchedCommentaireRequest: PatchedCommentaireRequest,
 ) => {
      return customAxios<Commentaire>(
      {url: `/commentaires/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedCommentaireRequest
    },
      );
    }
  
/**
 * @summary Supprimer un commentaire
 */
const commentairesDestroy = (
    id: number,
 ) => {
      return customAxios<Commentaire>(
      {url: `/commentaires/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary Récupérer les statistiques de saturation des commentaires
 */
const commentairesSaturationStatsRetrieve = (
    
 ) => {
      return customAxios<void>(
      {url: `/commentaires/saturation-stats/`, method: 'GET'
    },
      );
    }
  
/**
 * 📎 ViewSet complet pour gérer les documents liés aux formations.
 * @summary 📄 Lister tous les documents
 */
const documentsList = (
    params?: DocumentsListParams,
 ) => {
      return customAxios<PaginatedDocumentList>(
      {url: `/documents/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * 📎 ViewSet complet pour gérer les documents liés aux formations.
 * @summary ➕ Ajouter un document
 */
const documentsCreate = (
    documentRequest: DocumentRequest,
 ) => {
      return customAxios<Document>(
      {url: `/documents/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: documentRequest
    },
      );
    }
  
/**
 * 📎 ViewSet complet pour gérer les documents liés aux formations.
 * @summary 📂 Détail d’un document
 */
const documentsRetrieve = (
    id: number,
 ) => {
      return customAxios<Document>(
      {url: `/documents/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * 📎 ViewSet complet pour gérer les documents liés aux formations.
 * @summary ✏️ Modifier un document
 */
const documentsUpdate = (
    id: number,
    documentRequest: DocumentRequest,
 ) => {
      return customAxios<Document>(
      {url: `/documents/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: documentRequest
    },
      );
    }
  
/**
 * 📎 ViewSet complet pour gérer les documents liés aux formations.
 */
const documentsPartialUpdate = (
    id: number,
    patchedDocumentRequest: PatchedDocumentRequest,
 ) => {
      return customAxios<Document>(
      {url: `/documents/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedDocumentRequest
    },
      );
    }
  
/**
 * 📎 ViewSet complet pour gérer les documents liés aux formations.
 * @summary 🗑️ Supprimer un document
 */
const documentsDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/documents/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * 📎 ViewSet complet pour gérer les documents liés aux formations.
 * @summary 🧾 Exporter tous les documents au format CSV
 */
const documentsExportCsvRetrieve = (
    
 ) => {
      return customAxios<Blob>(
      {url: `/documents/export-csv/`, method: 'GET',
        responseType: 'blob'
    },
      );
    }
  
/**
 * 📎 ViewSet complet pour gérer les documents liés aux formations.
 * @summary 📚 Lister les documents d’une formation
 */
const documentsParFormationRetrieve = (
    params: DocumentsParFormationRetrieveParams,
 ) => {
      return customAxios<PaginatedDocumentList>(
      {url: `/documents/par-formation/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * 📆 ViewSet pour gérer les événements liés aux formations.
- CRUD complet
- Actions personnalisées : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalisée : RapAppPagination
 * @summary 📚 Lister les événements
 */
const evenementsList = (
    params?: EvenementsListParams,
 ) => {
      return customAxios<PaginatedEvenementList>(
      {url: `/evenements/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * 📆 ViewSet pour gérer les événements liés aux formations.
- CRUD complet
- Actions personnalisées : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalisée : RapAppPagination
 */
const evenementsCreate = (
    evenementRequest: EvenementRequest,
 ) => {
      return customAxios<Evenement>(
      {url: `/evenements/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: evenementRequest
    },
      );
    }
  
/**
 * 📆 ViewSet pour gérer les événements liés aux formations.
- CRUD complet
- Actions personnalisées : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalisée : RapAppPagination
 */
const evenementsRetrieve = (
    id: number,
 ) => {
      return customAxios<Evenement>(
      {url: `/evenements/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * 📆 ViewSet pour gérer les événements liés aux formations.
- CRUD complet
- Actions personnalisées : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalisée : RapAppPagination
 */
const evenementsUpdate = (
    id: number,
    evenementRequest: EvenementRequest,
 ) => {
      return customAxios<Evenement>(
      {url: `/evenements/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: evenementRequest
    },
      );
    }
  
/**
 * 📆 ViewSet pour gérer les événements liés aux formations.
- CRUD complet
- Actions personnalisées : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalisée : RapAppPagination
 */
const evenementsPartialUpdate = (
    id: number,
    patchedEvenementRequest: PatchedEvenementRequest,
 ) => {
      return customAxios<Evenement>(
      {url: `/evenements/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedEvenementRequest
    },
      );
    }
  
/**
 * 📆 ViewSet pour gérer les événements liés aux formations.
- CRUD complet
- Actions personnalisées : stats, export CSV
- Permissions : IsOwnerOrStaffOrAbove
- Pagination personnalisée : RapAppPagination
 */
const evenementsDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/evenements/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * 📤 Exporte les événements au format CSV.
 * @summary 🧾 Exporter les événements au format CSV
 */
const evenementsExportCsvRetrieve = (
    
 ) => {
      return customAxios<void>(
      {url: `/evenements/export-csv/`, method: 'GET'
    },
      );
    }
  
/**
 * 📈 Renvoie des statistiques d'événements par type entre deux dates.
 * @summary 📊 Statistiques par type d'événement
 */
const evenementsStatsParTypeRetrieve = (
    params?: EvenementsStatsParTypeRetrieveParams,
 ) => {
      return customAxios<void>(
      {url: `/evenements/stats-par-type/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Retourne une liste paginée des formations avec filtres disponibles.
 * @summary Lister les formations
 */
const formationsList = (
    params?: FormationsListParams,
 ) => {
      return customAxios<PaginatedFormationList>(
      {url: `/formations/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Créer une formation
 */
const formationsCreate = (
    formationRequest: FormationRequest,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: formationRequest
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Détail d'une formation
 */
const formationsRetrieve = (
    id: number,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Mettre à jour une formation
 */
const formationsUpdate = (
    id: number,
    formationRequest: FormationRequest,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: formationRequest
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 */
const formationsPartialUpdate = (
    id: number,
    patchedFormationRequest: PatchedFormationRequest,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedFormationRequest
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 */
const formationsDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/formations/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Ajouter un commentaire à une formation
 */
const formationsAjouterCommentaireCreate = (
    id: number,
    formationRequest: FormationRequest,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/ajouter_commentaire/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: formationRequest
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Ajouter un document à une formation
 */
const formationsAjouterDocumentCreate = (
    id: number,
    formationRequest: FormationRequest,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/ajouter_document/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: formationRequest
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Ajouter un événement à une formation
 */
const formationsAjouterEvenementCreate = (
    id: number,
    formationRequest: FormationRequest,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/ajouter_evenement/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: formationRequest
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Lister les commentaires d'une formation
 */
const formationsCommentairesRetrieve = (
    id: number,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/commentaires/`, method: 'GET'
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Lister les documents d'une formation
 */
const formationsDocumentsRetrieve = (
    id: number,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/documents/`, method: 'GET'
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Dupliquer une formation
 */
const formationsDupliquerCreate = (
    id: number,
    formationRequest: FormationRequest,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/dupliquer/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: formationRequest
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Obtenir l'historique d'une formation
 */
const formationsHistoriqueRetrieve = (
    id: number,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/historique/`, method: 'GET'
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Lister les partenaires d'une formation
 */
const formationsPartenairesRetrieve = (
    id: number,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/partenaires/`, method: 'GET'
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Lister les prospections liées à une formation
 */
const formationsProspectionsRetrieve = (
    id: number,
 ) => {
      return customAxios<Formation>(
      {url: `/formations/${id}/prospections/`, method: 'GET'
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Exporter les formations au format CSV
 */
const formationsExportCsvRetrieve = (
    
 ) => {
      return customAxios<Formation>(
      {url: `/formations/export_csv/`, method: 'GET'
    },
      );
    }
  
/**
 * 📚 ViewSet pour gérer les formations.
Inclut les opérations CRUD, l'historique, les documents, les commentaires, les prospections,
ainsi que des actions personnalisées comme duplication et export CSV.
 * @summary Statistiques mensuelles des formations
 */
const formationsStatsParMoisRetrieve = (
    
 ) => {
      return customAxios<Formation>(
      {url: `/formations/stats_par_mois/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Lister les historiques de prospection
 */
const historiquesProspectionList = (
    params?: HistoriquesProspectionListParams,
 ) => {
      return customAxios<PaginatedHistoriqueProspectionList>(
      {url: `/historiques-prospection/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Détail d’un historique de prospection
 */
const historiquesProspectionRetrieve = (
    id: number,
 ) => {
      return customAxios<HistoriqueProspection>(
      {url: `/historiques-prospection/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * 📘 ViewSet en lecture seule pour l’historique des statuts de VAE.
 */
const historiquesVaeList = (
    params?: HistoriquesVaeListParams,
 ) => {
      return customAxios<PaginatedHistoriqueStatutVAEList>(
      {url: `/historiques-vae/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * 📘 ViewSet en lecture seule pour l’historique des statuts de VAE.
 */
const historiquesVaeRetrieve = (
    id: number,
 ) => {
      return customAxios<HistoriqueStatutVAE>(
      {url: `/historiques-vae/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * 
    Permet à un utilisateur de se connecter et de recevoir un token d'authentification.

    ✅ Accès public (non authentifié).
    🔐 Le token est requis ensuite pour les appels protégés.
    
 * @summary Connexion
 */
const loginCreate = (
    loginRequest: LoginRequest,
 ) => {
      return customAxios<User>(
      {url: `/login/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest
    },
      );
    }
  
/**
 * Affiche tous les logs enregistrés (lecture seule, paginée).
 * @summary Liste des logs utilisateur
 */
const logsList = (
    params?: LogsListParams,
 ) => {
      return customAxios<PaginatedLogUtilisateurList>(
      {url: `/logs/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Affiche les détails d’un log utilisateur.
 * @summary Détail d’un log
 */
const logsRetrieve = (
    id: number,
 ) => {
      return customAxios<LogUtilisateur>(
      {url: `/logs/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * 🔁 ViewSet CRUD complet pour les partenaires
 * @summary Lister les partenaires
 */
const partenairesList = (
    params?: PartenairesListParams,
 ) => {
      return customAxios<PaginatedPartenaireList>(
      {url: `/partenaires/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * 🔁 ViewSet CRUD complet pour les partenaires
 * @summary Créer un partenaire
 */
const partenairesCreate = (
    partenaireRequest: PartenaireRequest,
 ) => {
      return customAxios<void>(
      {url: `/partenaires/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: partenaireRequest
    },
      );
    }
  
/**
 * 🔁 ViewSet CRUD complet pour les partenaires
 * @summary Détail d’un partenaire
 */
const partenairesRetrieve = (
    id: number,
 ) => {
      return customAxios<Partenaire>(
      {url: `/partenaires/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * 🔁 ViewSet CRUD complet pour les partenaires
 * @summary Modifier un partenaire
 */
const partenairesUpdate = (
    id: number,
    partenaireRequest: PartenaireRequest,
 ) => {
      return customAxios<void>(
      {url: `/partenaires/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: partenaireRequest
    },
      );
    }
  
/**
 * 🔁 ViewSet CRUD complet pour les partenaires
 */
const partenairesPartialUpdate = (
    id: number,
    patchedPartenaireRequest: PatchedPartenaireRequest,
 ) => {
      return customAxios<Partenaire>(
      {url: `/partenaires/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedPartenaireRequest
    },
      );
    }
  
/**
 * 🔁 ViewSet CRUD complet pour les partenaires
 * @summary Supprimer un partenaire
 */
const partenairesDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/partenaires/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * @summary Lister les bilans globaux
 */
const prepaGlobauxList = (
    params?: PrepaGlobauxListParams,
 ) => {
      return customAxios<PaginatedPrepaCompGlobalList>(
      {url: `/prepa-globaux/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Créer un bilan global
 */
const prepaGlobauxCreate = (
    prepaCompGlobalRequest: PrepaCompGlobalRequest,
 ) => {
      return customAxios<PrepaCompGlobal>(
      {url: `/prepa-globaux/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: prepaCompGlobalRequest
    },
      );
    }
  
/**
 * @summary Détail d’un bilan global
 */
const prepaGlobauxRetrieve = (
    id: number,
 ) => {
      return customAxios<PrepaCompGlobal>(
      {url: `/prepa-globaux/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Modifier un bilan global
 */
const prepaGlobauxUpdate = (
    id: number,
    prepaCompGlobalRequest: PrepaCompGlobalRequest,
 ) => {
      return customAxios<PrepaCompGlobal>(
      {url: `/prepa-globaux/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: prepaCompGlobalRequest
    },
      );
    }
  
const prepaGlobauxPartialUpdate = (
    id: number,
    patchedPrepaCompGlobalRequest: PatchedPrepaCompGlobalRequest,
 ) => {
      return customAxios<PrepaCompGlobal>(
      {url: `/prepa-globaux/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedPrepaCompGlobalRequest
    },
      );
    }
  
/**
 * @summary Supprimer un bilan global
 */
const prepaGlobauxDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/prepa-globaux/${id}/`, method: 'DELETE'
    },
      );
    }
  
const prepaGlobauxParCentreRetrieve = (
    
 ) => {
      return customAxios<PrepaCompGlobal>(
      {url: `/prepa-globaux/par-centre/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Liste des prospections
 */
const prospectionsList = (
    params?: ProspectionsListParams,
 ) => {
      return customAxios<PaginatedProspectionList>(
      {url: `/prospections/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Créer une prospection
 */
const prospectionsCreate = (
    prospectionRequest: ProspectionRequest,
 ) => {
      return customAxios<Prospection>(
      {url: `/prospections/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: prospectionRequest
    },
      );
    }
  
/**
 * @summary Détail d'une prospection
 */
const prospectionsRetrieve = (
    id: number,
 ) => {
      return customAxios<Prospection>(
      {url: `/prospections/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Mettre à jour une prospection
 */
const prospectionsUpdate = (
    id: number,
    prospectionRequest: ProspectionRequest,
 ) => {
      return customAxios<Prospection>(
      {url: `/prospections/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: prospectionRequest
    },
      );
    }
  
const prospectionsPartialUpdate = (
    id: number,
    patchedProspectionRequest: PatchedProspectionRequest,
 ) => {
      return customAxios<Prospection>(
      {url: `/prospections/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProspectionRequest
    },
      );
    }
  
/**
 * @summary Annuler une prospection
 */
const prospectionsDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/prospections/${id}/`, method: 'DELETE'
    },
      );
    }
  
const prospectionsChangerStatutCreate = (
    id: number,
    prospectionRequest: ProspectionRequest,
 ) => {
      return customAxios<Prospection>(
      {url: `/prospections/${id}/changer-statut/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: prospectionRequest
    },
      );
    }
  
const prospectionsHistoriquesRetrieve = (
    id: number,
 ) => {
      return customAxios<Prospection>(
      {url: `/prospections/${id}/historiques/`, method: 'GET'
    },
      );
    }
  
/**
 * Affiche la liste paginée des rapports générés.
 * @summary 📊 Liste des rapports
 */
const rapportsList = (
    params?: RapportsListParams,
 ) => {
      return customAxios<PaginatedRapportList>(
      {url: `/rapports/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Crée un nouveau rapport système ou manuel.
 * @summary ➕ Créer un rapport
 */
const rapportsCreate = (
    rapportRequest: RapportRequest,
 ) => {
      return customAxios<void>(
      {url: `/rapports/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: rapportRequest
    },
      );
    }
  
/**
 * Récupère les détails complets d’un rapport.
 * @summary 📄 Détail d’un rapport
 */
const rapportsRetrieve = (
    id: number,
 ) => {
      return customAxios<Rapport>(
      {url: `/rapports/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * Met à jour les champs d’un rapport existant.
 * @summary ✏️ Modifier un rapport
 */
const rapportsUpdate = (
    id: number,
    rapportRequest: RapportRequest,
 ) => {
      return customAxios<void>(
      {url: `/rapports/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: rapportRequest
    },
      );
    }
  
/**
 * 📊 ViewSet complet pour les rapports.
CRUD + pagination + journalisation + sécurité
 */
const rapportsPartialUpdate = (
    id: number,
    patchedRapportRequest: PatchedRapportRequest,
 ) => {
      return customAxios<Rapport>(
      {url: `/rapports/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedRapportRequest
    },
      );
    }
  
/**
 * Supprime logiquement un rapport (désactivation).
 * @summary 🗑️ Supprimer un rapport
 */
const rapportsDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/rapports/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * Retourne toutes les semaines avec pagination.
 * @summary Lister les semaines
 */
const semainesList = (
    params?: SemainesListParams,
 ) => {
      return customAxios<PaginatedSemaineList>(
      {url: `/semaines/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Créer une semaine
 */
const semainesCreate = (
    semaineRequest: SemaineRequest,
 ) => {
      return customAxios<Semaine>(
      {url: `/semaines/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: semaineRequest
    },
      );
    }
  
/**
 * @summary Détail d'une semaine
 */
const semainesRetrieve = (
    id: number,
 ) => {
      return customAxios<Semaine>(
      {url: `/semaines/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Mettre à jour une semaine
 */
const semainesUpdate = (
    id: number,
    semaineRequest: SemaineRequest,
 ) => {
      return customAxios<Semaine>(
      {url: `/semaines/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: semaineRequest
    },
      );
    }
  
const semainesPartialUpdate = (
    id: number,
    patchedSemaineRequest: PatchedSemaineRequest,
 ) => {
      return customAxios<Semaine>(
      {url: `/semaines/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedSemaineRequest
    },
      );
    }
  
/**
 * @summary Supprimer une semaine
 */
const semainesDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/semaines/${id}/`, method: 'DELETE'
    },
      );
    }
  
const semainesCouranteRetrieve = (
    
 ) => {
      return customAxios<Semaine>(
      {url: `/semaines/courante/`, method: 'GET'
    },
      );
    }
  
/**
 * Récupère tous les statuts actifs avec libellés, couleurs et badges HTML.
 * @summary Liste des statuts
 */
const statutsList = (
    params?: StatutsListParams,
 ) => {
      return customAxios<PaginatedStatutList>(
      {url: `/statuts/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Crée un nouveau statut avec validation stricte des couleurs et du champ 'autre'.
 * @summary Créer un statut
 */
const statutsCreate = (
    statutRequest: StatutRequest,
 ) => {
      return customAxios<Statut>(
      {url: `/statuts/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: statutRequest
    },
      );
    }
  
/**
 * Retourne les détails d’un statut par ID.
 * @summary Détail d’un statut
 */
const statutsRetrieve = (
    id: number,
 ) => {
      return customAxios<Statut>(
      {url: `/statuts/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * Met à jour un statut existant (partiellement ou complètement).
 * @summary Mettre à jour un statut
 */
const statutsUpdate = (
    id: number,
    statutRequest: StatutRequest,
 ) => {
      return customAxios<Statut>(
      {url: `/statuts/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: statutRequest
    },
      );
    }
  
/**
 * 🎯 API REST pour la gestion des statuts de formation.
Permet la création, consultation, mise à jour et désactivation logique.
 */
const statutsPartialUpdate = (
    id: number,
    patchedStatutRequest: PatchedStatutRequest,
 ) => {
      return customAxios<Statut>(
      {url: `/statuts/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedStatutRequest
    },
      );
    }
  
/**
 * Supprime logiquement un statut en le désactivant (is_active = False).
 * @summary Supprimer un statut
 */
const statutsDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/statuts/${id}/`, method: 'DELETE'
    },
      );
    }
  
const suivisJuryList = (
    params?: SuivisJuryListParams,
 ) => {
      return customAxios<PaginatedSuiviJuryList>(
      {url: `/suivis-jury/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * @summary Créer un suivi jury
 */
const suivisJuryCreate = (
    suiviJuryRequest: SuiviJuryRequest,
 ) => {
      return customAxios<SuiviJury>(
      {url: `/suivis-jury/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: suiviJuryRequest
    },
      );
    }
  
const suivisJuryRetrieve = (
    id: number,
 ) => {
      return customAxios<SuiviJury>(
      {url: `/suivis-jury/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * @summary Mettre à jour un suivi jury
 */
const suivisJuryUpdate = (
    id: number,
    suiviJuryRequest: SuiviJuryRequest,
 ) => {
      return customAxios<SuiviJury>(
      {url: `/suivis-jury/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: suiviJuryRequest
    },
      );
    }
  
const suivisJuryPartialUpdate = (
    id: number,
    patchedSuiviJuryRequest: PatchedSuiviJuryRequest,
 ) => {
      return customAxios<SuiviJury>(
      {url: `/suivis-jury/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedSuiviJuryRequest
    },
      );
    }
  
/**
 * @summary Supprimer logiquement un suivi jury
 */
const suivisJuryDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/suivis-jury/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * 
        Cette vue permet de vérifier si un token d’authentification (JWT ou DRF Token) est valide,
        et retourne les informations du compte utilisateur connecté, y compris son rôle.

        🔒 Requiert un token d’authentification valide dans l'en-tête `Authorization`.
    
 * @summary Vérifier la validité du token et le rôle
 */
const testTokenRetrieve = (
    
 ) => {
      return customAxios<TestTokenRetrieve200>(
      {url: `/test-token/`, method: 'GET'
    },
      );
    }
  
/**
 * Retourne un access token (JWT) et un refresh token.
 * @summary Connexion avec email et mot de passe
 */
const tokenCreate = (
    emailTokenRequestRequest: EmailTokenRequestRequest,
 ) => {
      return customAxios<EmailTokenResponse>(
      {url: `/token/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: emailTokenRequestRequest
    },
      );
    }
  
/**
 * Retourne la liste paginée des types d'offres disponibles.
 * @summary 📄 Liste des types d'offres
 */
const typeoffresList = (
    params?: TypeoffresListParams,
 ) => {
      return customAxios<PaginatedTypeOffreList>(
      {url: `/typeoffres/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Ajoute un nouveau type d’offre, standard ou personnalisé.
 * @summary ➕ Créer un type d’offre
 */
const typeoffresCreate = (
    typeOffreRequest: TypeOffreRequest,
 ) => {
      return customAxios<void>(
      {url: `/typeoffres/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: typeOffreRequest
    },
      );
    }
  
/**
 * Retourne les informations détaillées pour un type d'offre.
 * @summary 🔍 Détail d’un type d’offre
 */
const typeoffresRetrieve = (
    id: number,
 ) => {
      return customAxios<TypeOffre>(
      {url: `/typeoffres/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * Met à jour les données d’un type d’offre existant.
 * @summary ✏️ Modifier un type d’offre
 */
const typeoffresUpdate = (
    id: number,
    typeOffreRequest: TypeOffreRequest,
 ) => {
      return customAxios<void>(
      {url: `/typeoffres/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: typeOffreRequest
    },
      );
    }
  
/**
 * 🎯 ViewSet complet pour les types d'offres.
CRUD + journalisation + pagination + permissions + Swagger.
 */
const typeoffresPartialUpdate = (
    id: number,
    patchedTypeOffreRequest: PatchedTypeOffreRequest,
 ) => {
      return customAxios<TypeOffre>(
      {url: `/typeoffres/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedTypeOffreRequest
    },
      );
    }
  
/**
 * Suppression logique d’un type d’offre (désactivation).
 * @summary 🗑️ Supprimer un type d’offre
 */
const typeoffresDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/typeoffres/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * Récupère tous les utilisateurs actifs, avec filtrage, recherche et tri.
 * @summary Liste des utilisateurs
 */
const usersList = (
    params?: UsersListParams,
 ) => {
      return customAxios<PaginatedCustomUserList>(
      {url: `/users/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * Crée un nouvel utilisateur avec un rôle, un email et d'autres champs.
 * @summary Créer un utilisateur
 */
const usersCreate = (
    customUserRequest: CustomUserRequest,
 ) => {
      return customAxios<void>(
      {url: `/users/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: customUserRequest
    },
      );
    }
  
/**
 * Récupère les informations détaillées d’un utilisateur par ID.
 * @summary Détail d'un utilisateur
 */
const usersRetrieve = (
    id: number,
 ) => {
      return customAxios<CustomUser>(
      {url: `/users/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * Modifie les champs d’un utilisateur existant.
 * @summary Mettre à jour un utilisateur
 */
const usersUpdate = (
    id: number,
    customUserRequest: CustomUserRequest,
 ) => {
      return customAxios<void>(
      {url: `/users/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: customUserRequest
    },
      );
    }
  
/**
 * 👤 ViewSet complet pour la gestion des utilisateurs.
Fournit les actions CRUD + une action `me` pour l’utilisateur connecté.
 */
const usersPartialUpdate = (
    id: number,
    patchedCustomUserRequest: PatchedCustomUserRequest,
 ) => {
      return customAxios<CustomUser>(
      {url: `/users/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedCustomUserRequest
    },
      );
    }
  
/**
 * Supprime logiquement un utilisateur (is_active = False).
 * @summary Supprimer un utilisateur
 */
const usersDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/users/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * 👤 ViewSet complet pour la gestion des utilisateurs.
Fournit les actions CRUD + une action `me` pour l’utilisateur connecté.
 */
const usersMeRetrieve = (
    
 ) => {
      return customAxios<CustomUser>(
      {url: `/users/me/`, method: 'GET'
    },
      );
    }
  
/**
 * 👤 ViewSet complet pour la gestion des utilisateurs.
Fournit les actions CRUD + une action `me` pour l’utilisateur connecté.
 */
const usersRolesRetrieve = (
    
 ) => {
      return customAxios<CustomUser>(
      {url: `/users/roles/`, method: 'GET'
    },
      );
    }
  
/**
 * 📝 ViewSet principal pour la gestion des VAE individuelles.
 */
const vaesList = (
    params?: VaesListParams,
 ) => {
      return customAxios<PaginatedVAEList>(
      {url: `/vaes/`, method: 'GET',
        params
    },
      );
    }
  
/**
 * 📝 ViewSet principal pour la gestion des VAE individuelles.
 * @summary Créer une VAE
 */
const vaesCreate = (
    vAERequest: VAERequest,
 ) => {
      return customAxios<Vae>(
      {url: `/vaes/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vAERequest
    },
      );
    }
  
/**
 * 📝 ViewSet principal pour la gestion des VAE individuelles.
 */
const vaesRetrieve = (
    id: number,
 ) => {
      return customAxios<Vae>(
      {url: `/vaes/${id}/`, method: 'GET'
    },
      );
    }
  
/**
 * 📝 ViewSet principal pour la gestion des VAE individuelles.
 * @summary Mettre à jour une VAE
 */
const vaesUpdate = (
    id: number,
    vAERequest: VAERequest,
 ) => {
      return customAxios<Vae>(
      {url: `/vaes/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: vAERequest
    },
      );
    }
  
/**
 * 📝 ViewSet principal pour la gestion des VAE individuelles.
 */
const vaesPartialUpdate = (
    id: number,
    patchedVAERequest: PatchedVAERequest,
 ) => {
      return customAxios<Vae>(
      {url: `/vaes/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedVAERequest
    },
      );
    }
  
/**
 * 📝 ViewSet principal pour la gestion des VAE individuelles.
 * @summary Supprimer logiquement une VAE
 */
const vaesDestroy = (
    id: number,
 ) => {
      return customAxios<void>(
      {url: `/vaes/${id}/`, method: 'DELETE'
    },
      );
    }
  
/**
 * 🔁 Change le statut d’une VAE avec historique.
 */
const vaesChangerStatutCreate = (
    id: number,
    vAERequest: VAERequest,
 ) => {
      return customAxios<Vae>(
      {url: `/vaes/${id}/changer-statut/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: vAERequest
    },
      );
    }
  
/**
 * 📜 Liste des changements de statut pour une VAE donnée.
 */
const vaesHistoriquesRetrieve = (
    id: number,
 ) => {
      return customAxios<Vae>(
      {url: `/vaes/${id}/historiques/`, method: 'GET'
    },
      );
    }
  
return {centresList,centresCreate,centresRetrieve,centresUpdate,centresPartialUpdate,centresDestroy,commentairesList,commentairesCreate,commentairesRetrieve,commentairesUpdate,commentairesPartialUpdate,commentairesDestroy,commentairesSaturationStatsRetrieve,documentsList,documentsCreate,documentsRetrieve,documentsUpdate,documentsPartialUpdate,documentsDestroy,documentsExportCsvRetrieve,documentsParFormationRetrieve,evenementsList,evenementsCreate,evenementsRetrieve,evenementsUpdate,evenementsPartialUpdate,evenementsDestroy,evenementsExportCsvRetrieve,evenementsStatsParTypeRetrieve,formationsList,formationsCreate,formationsRetrieve,formationsUpdate,formationsPartialUpdate,formationsDestroy,formationsAjouterCommentaireCreate,formationsAjouterDocumentCreate,formationsAjouterEvenementCreate,formationsCommentairesRetrieve,formationsDocumentsRetrieve,formationsDupliquerCreate,formationsHistoriqueRetrieve,formationsPartenairesRetrieve,formationsProspectionsRetrieve,formationsExportCsvRetrieve,formationsStatsParMoisRetrieve,historiquesProspectionList,historiquesProspectionRetrieve,historiquesVaeList,historiquesVaeRetrieve,loginCreate,logsList,logsRetrieve,partenairesList,partenairesCreate,partenairesRetrieve,partenairesUpdate,partenairesPartialUpdate,partenairesDestroy,prepaGlobauxList,prepaGlobauxCreate,prepaGlobauxRetrieve,prepaGlobauxUpdate,prepaGlobauxPartialUpdate,prepaGlobauxDestroy,prepaGlobauxParCentreRetrieve,prospectionsList,prospectionsCreate,prospectionsRetrieve,prospectionsUpdate,prospectionsPartialUpdate,prospectionsDestroy,prospectionsChangerStatutCreate,prospectionsHistoriquesRetrieve,rapportsList,rapportsCreate,rapportsRetrieve,rapportsUpdate,rapportsPartialUpdate,rapportsDestroy,semainesList,semainesCreate,semainesRetrieve,semainesUpdate,semainesPartialUpdate,semainesDestroy,semainesCouranteRetrieve,statutsList,statutsCreate,statutsRetrieve,statutsUpdate,statutsPartialUpdate,statutsDestroy,suivisJuryList,suivisJuryCreate,suivisJuryRetrieve,suivisJuryUpdate,suivisJuryPartialUpdate,suivisJuryDestroy,testTokenRetrieve,tokenCreate,typeoffresList,typeoffresCreate,typeoffresRetrieve,typeoffresUpdate,typeoffresPartialUpdate,typeoffresDestroy,usersList,usersCreate,usersRetrieve,usersUpdate,usersPartialUpdate,usersDestroy,usersMeRetrieve,usersRolesRetrieve,vaesList,vaesCreate,vaesRetrieve,vaesUpdate,vaesPartialUpdate,vaesDestroy,vaesChangerStatutCreate,vaesHistoriquesRetrieve}};
export type CentresListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['centresList']>>>
export type CentresCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['centresCreate']>>>
export type CentresRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['centresRetrieve']>>>
export type CentresUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['centresUpdate']>>>
export type CentresPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['centresPartialUpdate']>>>
export type CentresDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['centresDestroy']>>>
export type CommentairesListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['commentairesList']>>>
export type CommentairesCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['commentairesCreate']>>>
export type CommentairesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['commentairesRetrieve']>>>
export type CommentairesUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['commentairesUpdate']>>>
export type CommentairesPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['commentairesPartialUpdate']>>>
export type CommentairesDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['commentairesDestroy']>>>
export type CommentairesSaturationStatsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['commentairesSaturationStatsRetrieve']>>>
export type DocumentsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['documentsList']>>>
export type DocumentsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['documentsCreate']>>>
export type DocumentsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['documentsRetrieve']>>>
export type DocumentsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['documentsUpdate']>>>
export type DocumentsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['documentsPartialUpdate']>>>
export type DocumentsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['documentsDestroy']>>>
export type DocumentsExportCsvRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['documentsExportCsvRetrieve']>>>
export type DocumentsParFormationRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['documentsParFormationRetrieve']>>>
export type EvenementsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['evenementsList']>>>
export type EvenementsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['evenementsCreate']>>>
export type EvenementsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['evenementsRetrieve']>>>
export type EvenementsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['evenementsUpdate']>>>
export type EvenementsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['evenementsPartialUpdate']>>>
export type EvenementsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['evenementsDestroy']>>>
export type EvenementsExportCsvRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['evenementsExportCsvRetrieve']>>>
export type EvenementsStatsParTypeRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['evenementsStatsParTypeRetrieve']>>>
export type FormationsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsList']>>>
export type FormationsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsCreate']>>>
export type FormationsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsRetrieve']>>>
export type FormationsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsUpdate']>>>
export type FormationsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsPartialUpdate']>>>
export type FormationsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsDestroy']>>>
export type FormationsAjouterCommentaireCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsAjouterCommentaireCreate']>>>
export type FormationsAjouterDocumentCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsAjouterDocumentCreate']>>>
export type FormationsAjouterEvenementCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsAjouterEvenementCreate']>>>
export type FormationsCommentairesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsCommentairesRetrieve']>>>
export type FormationsDocumentsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsDocumentsRetrieve']>>>
export type FormationsDupliquerCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsDupliquerCreate']>>>
export type FormationsHistoriqueRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsHistoriqueRetrieve']>>>
export type FormationsPartenairesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsPartenairesRetrieve']>>>
export type FormationsProspectionsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsProspectionsRetrieve']>>>
export type FormationsExportCsvRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsExportCsvRetrieve']>>>
export type FormationsStatsParMoisRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['formationsStatsParMoisRetrieve']>>>
export type HistoriquesProspectionListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['historiquesProspectionList']>>>
export type HistoriquesProspectionRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['historiquesProspectionRetrieve']>>>
export type HistoriquesVaeListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['historiquesVaeList']>>>
export type HistoriquesVaeRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['historiquesVaeRetrieve']>>>
export type LoginCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['loginCreate']>>>
export type LogsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['logsList']>>>
export type LogsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['logsRetrieve']>>>
export type PartenairesListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['partenairesList']>>>
export type PartenairesCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['partenairesCreate']>>>
export type PartenairesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['partenairesRetrieve']>>>
export type PartenairesUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['partenairesUpdate']>>>
export type PartenairesPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['partenairesPartialUpdate']>>>
export type PartenairesDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['partenairesDestroy']>>>
export type PrepaGlobauxListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prepaGlobauxList']>>>
export type PrepaGlobauxCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prepaGlobauxCreate']>>>
export type PrepaGlobauxRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prepaGlobauxRetrieve']>>>
export type PrepaGlobauxUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prepaGlobauxUpdate']>>>
export type PrepaGlobauxPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prepaGlobauxPartialUpdate']>>>
export type PrepaGlobauxDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prepaGlobauxDestroy']>>>
export type PrepaGlobauxParCentreRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prepaGlobauxParCentreRetrieve']>>>
export type ProspectionsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prospectionsList']>>>
export type ProspectionsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prospectionsCreate']>>>
export type ProspectionsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prospectionsRetrieve']>>>
export type ProspectionsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prospectionsUpdate']>>>
export type ProspectionsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prospectionsPartialUpdate']>>>
export type ProspectionsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prospectionsDestroy']>>>
export type ProspectionsChangerStatutCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prospectionsChangerStatutCreate']>>>
export type ProspectionsHistoriquesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['prospectionsHistoriquesRetrieve']>>>
export type RapportsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['rapportsList']>>>
export type RapportsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['rapportsCreate']>>>
export type RapportsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['rapportsRetrieve']>>>
export type RapportsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['rapportsUpdate']>>>
export type RapportsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['rapportsPartialUpdate']>>>
export type RapportsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['rapportsDestroy']>>>
export type SemainesListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['semainesList']>>>
export type SemainesCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['semainesCreate']>>>
export type SemainesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['semainesRetrieve']>>>
export type SemainesUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['semainesUpdate']>>>
export type SemainesPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['semainesPartialUpdate']>>>
export type SemainesDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['semainesDestroy']>>>
export type SemainesCouranteRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['semainesCouranteRetrieve']>>>
export type StatutsListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['statutsList']>>>
export type StatutsCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['statutsCreate']>>>
export type StatutsRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['statutsRetrieve']>>>
export type StatutsUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['statutsUpdate']>>>
export type StatutsPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['statutsPartialUpdate']>>>
export type StatutsDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['statutsDestroy']>>>
export type SuivisJuryListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['suivisJuryList']>>>
export type SuivisJuryCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['suivisJuryCreate']>>>
export type SuivisJuryRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['suivisJuryRetrieve']>>>
export type SuivisJuryUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['suivisJuryUpdate']>>>
export type SuivisJuryPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['suivisJuryPartialUpdate']>>>
export type SuivisJuryDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['suivisJuryDestroy']>>>
export type TestTokenRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['testTokenRetrieve']>>>
export type TokenCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['tokenCreate']>>>
export type TypeoffresListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['typeoffresList']>>>
export type TypeoffresCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['typeoffresCreate']>>>
export type TypeoffresRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['typeoffresRetrieve']>>>
export type TypeoffresUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['typeoffresUpdate']>>>
export type TypeoffresPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['typeoffresPartialUpdate']>>>
export type TypeoffresDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['typeoffresDestroy']>>>
export type UsersListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['usersList']>>>
export type UsersCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['usersCreate']>>>
export type UsersRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['usersRetrieve']>>>
export type UsersUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['usersUpdate']>>>
export type UsersPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['usersPartialUpdate']>>>
export type UsersDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['usersDestroy']>>>
export type UsersMeRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['usersMeRetrieve']>>>
export type UsersRolesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['usersRolesRetrieve']>>>
export type VaesListResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['vaesList']>>>
export type VaesCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['vaesCreate']>>>
export type VaesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['vaesRetrieve']>>>
export type VaesUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['vaesUpdate']>>>
export type VaesPartialUpdateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['vaesPartialUpdate']>>>
export type VaesDestroyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['vaesDestroy']>>>
export type VaesChangerStatutCreateResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['vaesChangerStatutCreate']>>>
export type VaesHistoriquesRetrieveResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getRapApp>['vaesHistoriquesRetrieve']>>>
